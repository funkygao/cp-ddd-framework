digraph G {
   label="Call Graph";
   labelloc = "t";
   rankdir=LR;
   CheckingAppService -> "OrderBag.canceledBag" [label="canceledBag"];
   CheckingAppService -> "Task.removeOrderLines" [label="removeOrderLines"];
   CheckingAppService -> "Task.isEmpty" [label="isEmpty"];
   CheckingAppService -> "Task.plan" [label="plan"];
   CheckingAppService -> "TaskBag.totalCheckedQty" [label="totalCheckedQty"];
   CheckingAppService -> "TaskBag.totalPendingQty" [label="totalPendingQty"];
   CheckingAppService -> "Order.recommendedPlatform" [label="recommendedPlatform"];
   CheckingAppService -> "TaskBag.platforms" [label="platforms"];
   CheckingAppService -> "OrderBag.canceledBag" [label="canceledBag"];
   CheckingAppService -> "Order.recommendPackQty" [label="recommendPackQty"];
   CheckingAppService -> "Carton.cartonizationRule" [label="cartonizationRule"];
   CheckingAppService -> "Carton.bindOrder" [label="bindOrder"];
   CheckingAppService -> "Carton.transferFrom" [label="transferFrom"];
   CheckingAppService -> "TaskOfOrderPending.confirmQty" [label="confirmQty"];
   CheckingAppService -> "CartonBag.fulfill" [label="fulfill"];
   CheckingAppService -> "CartonBag.putOnPallet" [label="putOnPallet"];
   CheckingAppService -> "Order.checkedBy" [label="checkedBy"];
   CheckingAppService -> "CartonBag.deductConsumableInventory" [label="deductConsumableInventory"];
   CheckingAppService -> "Carton.installConsumables" [label="installConsumables"];
   CheckingAppService -> "Carton.fulfill" [label="fulfill"];
   Order -> "OrderCartons.totalCartonizedQty" [label="totalCartonizedQty"];
   Order -> "OrderLineBag.totalExpectedQty" [label="totalExpectedQty"];
   OrderNotFullyCartonized -> "Order.totalExpectedQty" [label="totalExpectedQty"];
   OrderNotFullyCartonized -> "OrderCartons.totalCartonizedQty" [label="totalCartonizedQty"];
   OrderNotCartonizedYet -> "OrderCartons.totalCartonizedQty" [label="totalCartonizedQty"];
   ConsumableExtPolicy -> "OrderBag.consumableCostFirst" [label="consumableCostFirst"];
   CartonBag -> "Carton.fulfill" [label="fulfill"];
   CartonBag -> "Carton.deductConsumableInventory" [label="deductConsumableInventory"];
   TaskOfSkuPending -> "ContainerBag.confirmQty" [label="confirmQty"];
   UniqueCodeConstraint -> "TaskCartons.contains" [label="contains"];
   Task -> "TaskOfSkuPending.confirmQty" [label="confirmQty"];
   Task -> "ContainerBag.totalSku" [label="totalSku"];
   Task -> "ContainerBag.totalQty" [label="totalQty"];
   Task -> "ContainerBag.totalPendingQty" [label="totalPendingQty"];
   Task -> "ContainerBag.orderNoSet" [label="orderNoSet"];
   ContainerBag -> "ContainerItemBag.totalSku" [label="totalSku"];
}